digraph "o2::mch::raw::StateMachine_&lt; CHARGESUM &gt;"
{
 // INTERACTIVE_SVG=YES
  bgcolor="transparent";
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node2 [label="{o2::mch::raw::StateMachine\l_\< CHARGESUM \>\n||+ data10()\l+ channelNumber()\l+ pop10()\l+ addSample()\l+ addChargeSum()\l+ no_transition()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node3 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node3 [label="{msm::front::state_machine\l_def\< StateMachine_\< CHARGESUM \> \>\n||}",height=0.2,width=0.4,color="grey75"];
  Node4 -> Node2 [color="grey25",fontsize="10",style="solid",label=" +masks" ,arrowhead="odiamond",fontname="Helvetica"];
  Node4 [label="{array\< uint64_t, 5 \>\n||}",height=0.2,width=0.4,color="grey75"];
  Node5 -> Node2 [color="grey25",fontsize="10",style="solid",label=" +data" ,arrowhead="odiamond",fontname="Helvetica"];
  Node5 [label="{uint64_t\n||}",height=0.2,width=0.4,color="grey75"];
  Node6 -> Node2 [color="grey25",fontsize="10",style="solid",label=" +channelHandler" ,arrowhead="odiamond",fontname="Helvetica"];
  Node6 [label="{function\< void(DsElecId\l dsId, uint8_t channel,\l SampaCluster)\>\n||}",height=0.2,width=0.4,color="grey75"];
  Node7 -> Node2 [color="grey25",fontsize="10",style="solid",label=" +clusterTime\n+clusterSize\n+nof10BitWords" ,arrowhead="odiamond",fontname="Helvetica"];
  Node7 [label="{uint16_t\n||}",height=0.2,width=0.4,color="grey75"];
  Node8 -> Node2 [color="grey25",fontsize="10",style="solid",label=" +samples" ,arrowhead="odiamond",fontname="Helvetica"];
  Node8 [label="{vector\< uint16_t \>\n||}",height=0.2,width=0.4,color="grey75"];
  Node9 -> Node2 [color="grey25",fontsize="10",style="solid",label=" +sampaHeader" ,arrowhead="odiamond",fontname="Helvetica"];
  Node9 [label="{o2::mch::raw::SampaHeader\n||+ SampaHeader()\l+ SampaHeader()\l+ operator==()\l+ operator!=()\l+ operator\<()\l+ operator\<=()\l+ operator\>()\l+ operator\>=()\l+ hasError()\l+ hasHammingError()\l+ hasParityError()\l+ uint64()\l+ uint64()\l+ isHeartbeat()\l* hammingCode()\l* headerParity()\l* packetType()\l* nof10BitWords()\l* chipAddress()\l* channelAddress()\l* bunchCrossingCounter()\l* payloadParity()\l* hammingCode()\l* headerParity()\l* packetType()\l* nof10BitWords()\l* chipAddress()\l* channelAddress()\l* bunchCrossingCounter()\l* payloadParity()\l}",height=0.2,width=0.4,color="black",URL="$d8/d90/classo2_1_1mch_1_1raw_1_1SampaHeader.html",tooltip="SampaHeader is the 50-bits header word used in Sampa data transmission protocol. "];
  Node10 -> Node2 [color="grey25",fontsize="10",style="solid",label=" +dsId" ,arrowhead="odiamond",fontname="Helvetica"];
  Node10 [label="{o2::mch::raw::DsElecId\n||+ DsElecId()\l+ elinkIndexInGroup()\l+ elinkGroupId()\l+ elinkId()\l+ solarId()\l+ operator==()\l+ operator!=()\l}",height=0.2,width=0.4,color="black",URL="$d9/d8c/classo2_1_1mch_1_1raw_1_1DsElecId.html"];
  Node11 -> Node2 [color="grey25",fontsize="10",style="solid",label=" +nofSync\n+maskIndex" ,arrowhead="odiamond",fontname="Helvetica"];
  Node11 [label="{size_t\n||}",height=0.2,width=0.4,color="grey75"];
}
