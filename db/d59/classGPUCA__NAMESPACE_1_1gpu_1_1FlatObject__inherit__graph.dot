digraph "GPUCA_NAMESPACE::gpu::FlatObject"
{
 // INTERACTIVE_SVG=YES
  bgcolor="transparent";
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node0 [label="{GPUCA_NAMESPACE::gpu\l::FlatObject\n|# mFlatBufferSize\l# mConstructionMask\l# mFlatBufferContainer\l# mFlatBufferPtr\l|+ FlatObject()\l+ ~FlatObject()\l+ FlatObject()\l+ operator=()\l+ getFlatBufferSize()\l+ getFlatBufferPtr()\l+ isConstructed()\l+ isBufferInternal()\l+ adoptInternalBuffer()\l+ clearInternalBufferPtr()\l+ printC()\l+ alignSize()\l+ relocatePointer()\l+ stressTest()\l# startConstruction()\l# finishConstruction()\l# destroy()\l# cloneFromObject()\l# releaseInternalBuffer()\l# moveBufferTo()\l# setActualBufferAddress()\l# setFutureBufferAddress()\l# ClassDefNV()\l# getClassAlignmentBytes()\l# getBufferAlignmentBytes()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node0 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node1 [label="{GPUCA_NAMESPACE::gpu\l::IrregularSpline1D\n|+ const\l+ u1\l+ u2\l+ u3\l+ c0\l+ c1\l+ c2\l+ c3\l|+ IrregularSpline1D()\l+ IrregularSpline1D()\l+ operator=()\l+ ~IrregularSpline1D()\l+ cloneFromObject()\l+ destroy()\l+ construct()\l+ constructRegular()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ getNumberOfAxisBins()\l+ GPUd()\l+ print()\l+ getBufferAlignmentBytes()\l+ getDataAlignmentBytes()\l}",height=0.2,width=0.4,color="black",URL="$de/d7d/classGPUCA__NAMESPACE_1_1gpu_1_1IrregularSpline1D.html"];
  Node0 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node2 [label="{GPUCA_NAMESPACE::gpu\l::IrregularSpline2D3D\n|+ u\l+ v\l+ x\l+ y\l+ const\l+ u\l+ const\l|+ IrregularSpline2D3D()\l+ IrregularSpline2D3D()\l+ operator=()\l+ ~IrregularSpline2D3D()\l+ cloneFromObject()\l+ destroy()\l+ moveBufferTo()\l+ setActualBufferAddress()\l+ setFutureBufferAddress()\l+ construct()\l+ constructRegular()\l+ GPUd()\l+ GPUd()\l+ GPUgeneric()\l+ GPUgeneric()\l+ GPUgeneric()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ getFlatBufferSize()\l+ getFlatBufferPtr()\l+ getGridUOffset()\l+ getGridVOffset()\l+ print()\l+ getClassAlignmentBytes()\l+ getBufferAlignmentBytes()\l+ getDataAlignmentBytes()\l}",height=0.2,width=0.4,color="black",URL="$d5/d77/classGPUCA__NAMESPACE_1_1gpu_1_1IrregularSpline2D3D.html"];
  Node0 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node3 [label="{GPUCA_NAMESPACE::gpu\l::SemiregularSpline2D3D\n||+ SemiregularSpline2D3D()\l+ SemiregularSpline2D3D()\l+ operator=()\l+ ~SemiregularSpline2D3D()\l+ cloneFromObject()\l+ destroy()\l+ moveBufferTo()\l+ setActualBufferAddress()\l+ setFutureBufferAddress()\l+ construct()\l+ correctEdges()\l+ getSpline()\l+ getSplineVec()\l+ getNumberOfKnots()\l+ getNumberOfRows()\l+ getGridV()\l+ getGridU()\l+ getKnotUV()\l+ getFlatBufferSize()\l+ getDataIndex()\l+ getDataIndex0()\l+ getDataIndexMapOffset()\l+ getFlatBufferPtr()\l+ getSplineArray()\l+ getDataIndexMap()\l+ getClassAlignmentBytes()\l+ getBufferAlignmentBytes()\l+ getDataAlignmentBytes()\l}",height=0.2,width=0.4,color="black",URL="$d2/def/classGPUCA__NAMESPACE_1_1gpu_1_1SemiregularSpline2D3D.html"];
  Node0 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node4 [label="{GPUCA_NAMESPACE::gpu\l::Spline1D\n|+ knotL\l+ u\l+ u\l+ const\l|+ GPUd()\l+ Spline1D()\l+ Spline1D()\l+ Spline1D()\l+ Spline1D()\l+ operator=()\l+ ~Spline1D()\l+ constructKnots()\l+ constructKnotsRegular()\l+ GPUd()\l+ GPUgeneric()\l+ GPUgeneric()\l+ GPUgeneric()\l+ GPUgeneric()\l+ GPUgeneric()\l+ GPUd()\l+ GPUgeneric()\l+ GPUgeneric()\l+ GPUd()\l+ GPUgeneric()\l+ GPUgeneric()\l+ GPUd()\l+ getUmax()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ cloneFromObject()\l+ destroy()\l+ moveBufferTo()\l+ setActualBufferAddress()\l+ setFutureBufferAddress()\l+ getParameterAlignmentBytes()\l+ test()\l}",height=0.2,width=0.4,color="black",URL="$d0/d36/classGPUCA__NAMESPACE_1_1gpu_1_1Spline1D.html"];
  Node0 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node5 [label="{GPUCA_NAMESPACE::gpu\l::Spline2D\n|+ u\l+ v\l+ u\l+ const\l|+ GPUd()\l+ Spline2D()\l+ Spline2D()\l+ Spline2D()\l+ Spline2D()\l+ operator=()\l+ ~Spline2D()\l+ constructKnots()\l+ constructKnotsRegular()\l+ GPUd()\l+ GPUgeneric()\l+ GPUgeneric()\l+ GPUd()\l+ GPUgeneric()\l+ GPUgeneric()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ getGridUOffset()\l+ getGridVOffset()\l+ print()\l+ cloneFromObject()\l+ destroy()\l+ moveBufferTo()\l+ setActualBufferAddress()\l+ setFutureBufferAddress()\l+ getParameterAlignmentBytes()\l+ test()\l}",height=0.2,width=0.4,color="black",URL="$d3/dc3/classGPUCA__NAMESPACE_1_1gpu_1_1Spline2D.html"];
  Node0 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node6 [label="{GPUCA_NAMESPACE::gpu\l::TPCDistortionIRS\n|+ const\l+ row\l+ u\l+ v\l+ dx\l+ du\l+ const\l|+ TPCDistortionIRS()\l+ TPCDistortionIRS()\l+ operator=()\l+ ~TPCDistortionIRS()\l+ cloneFromObject()\l+ destroy()\l+ moveBufferTo()\l+ setActualBufferAddress()\l+ setFutureBufferAddress()\l+ startConstruction()\l+ setRowScenarioID()\l+ setSplineScenario()\l+ finishConstruction()\l+ setTimeStamp()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ getTimeStamp()\l+ GPUd()\l+ print()\l}",height=0.2,width=0.4,color="black",URL="$d9/d07/classGPUCA__NAMESPACE_1_1gpu_1_1TPCDistortionIRS.html"];
  Node0 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node7 [label="{GPUCA_NAMESPACE::gpu\l::TPCFastTransform\n|+ row\l+ pad\l+ time\l+ x\l+ y\l+ z\l+ vertexTime\l+ const\l+ float\l+ y\l+ z\l+ pad\l+ time\l+ const\l+ const\l+ u\l+ v\l+ const\l+ u\l+ v\l+ time\l+ const\l+ const\l+ x\l+ y\l+ z\l+ const\l|+ TPCFastTransform()\l+ TPCFastTransform()\l+ operator=()\l+ ~TPCFastTransform()\l+ cloneFromObject()\l+ moveBufferTo()\l+ setActualBufferAddress()\l+ setFutureBufferAddress()\l+ startConstruction()\l+ setCalibration()\l+ setTimeStamp()\l+ GPUd()\l+ getDistortionNonConst()\l+ finishConstruction()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ setApplyDistortionOn()\l+ setApplyDistortionOff()\l+ isDistortionApplied()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ writeToFile()\l+ print()\l+ getClassAlignmentBytes()\l+ getBufferAlignmentBytes()\l+ loadFromFile()\l}",height=0.2,width=0.4,color="black",URL="$d2/d47/classGPUCA__NAMESPACE_1_1gpu_1_1TPCFastTransform.html"];
}
